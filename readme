# üìà Precix: Optimizador de Ganancias

¬°Bienvenido a **Precix**!  
Esta herramienta te ayuda a encontrar el **precio de venta √≥ptimo** para maximizar las ganancias de tu producto, utilizando modelos econ√≥micos cl√°sicos y visualizaciones interactivas.

---

## üöÄ Caracter√≠sticas

- **C√°lculo autom√°tico** del precio √≥ptimo y la ganancia m√°xima.
- **Simulaci√≥n y gr√°fica** de la funci√≥n de ganancia seg√∫n el precio.
- Interfaz intuitiva y amigable con **Streamlit**.
- Personalizaci√≥n de par√°metros de demanda y costos.

---

## üõ†Ô∏è Dependencias

Precix utiliza las siguientes librer√≠as de Python:

| Paquete         | Prop√≥sito                                 |
|-----------------|-------------------------------------------|
| `streamlit`     | Interfaz web interactiva                  |
| `numpy`         | C√°lculos num√©ricos                        |
| `matplotlib`    | Gr√°ficas y visualizaciones                |
| `sympy`         | C√°lculo simb√≥lico y optimizaci√≥n          |

---

## üì¶ Instalaci√≥n

1. **Clona este repositorio** o descarga los archivos en una carpeta local.

2. **Crea un entorno virtual** (opcional pero recomendado):

   ```sh
   python -m venv venv
   source venv/bin/activate  # En Windows: venv\Scripts\activate
   ```

3. **Instala las dependencias** ejecutando:

   ```sh
   pip install streamlit numpy matplotlib sympy
   ```

---

## üìù Archivos principales

- [`precix_gui.py`](precix_gui.py): Interfaz principal y l√≥gica de la aplicaci√≥n.
- [`economic_models.py`](economic_models.py): Modelos econ√≥micos y funciones de ganancia.
- [`optimization_solver.py`](optimization_solver.py): Algoritmo de optimizaci√≥n simb√≥lica.

---

## üí° ¬øC√≥mo se usa?

1. **Ejecuta la aplicaci√≥n** con el siguiente comando:

   ```sh
   streamlit run precix_gui.py
   ```

2. **Abre tu navegador** y sigue el enlace que aparece en la terminal (usualmente http://localhost:8501).

3. **Configura los par√°metros** en la barra lateral:
   - Coeficientes de demanda (`a` y `b`)
   - Costo variable unitario
   - Costo fijo total

4. Haz clic en **"üöÄ Calcular Precio √ìptimo y Simular"**.

5. **¬°Listo!** Ver√°s el precio √≥ptimo sugerido, la ganancia m√°xima estimada y una gr√°fica interactiva.

---

## üé® Ejemplo visual

![Ejemplo de interfaz Precix](https://media.discordapp.net/attachments/1369315574986834010/1385835912541507604/image.png?ex=68597e05&is=68582c85&hm=4e4dc192bec4ffc617b983eac1c9ccd3e4e327ef77dda3775ec46bea93bd3d3b&=&format=webp&quality=lossless&width=1620&height=856) 

---

## ‚ùì Preguntas frecuentes

- **¬øPuedo usar decimales en los par√°metros?**  
  S√≠, todos los campos aceptan decimales.

- **¬øQu√© hago si veo un error?**  
  Verifica que los par√°metros sean positivos y tengan sentido econ√≥mico.

- **¬øPuedo modificar los modelos?**  
  S√≠, puedes editar [`economic_models.py`](economic_models.py) para adaptar los modelos a tus necesidades.

---

## üë®‚Äçüíª Autor√≠a

Creado con ‚ù§Ô∏è por el equipo de Precix.  
Hecho con Python, SymPy, NumPy, Matplotlib y Streamlit.

---

## üìù Cambios y caracter√≠sticas principales en `precix_gui.py`

1. **Estructura y organizaci√≥n del c√≥digo**
   - El archivo est√° organizado en secciones: funciones de modelado econ√≥mico, funciones de optimizaci√≥n, c√°lculo de m√©tricas, interfaz de usuario y visualizaci√≥n.

2. **Funciones matem√°ticas y de optimizaci√≥n**
   - Se implementaron funciones para modelar la demanda, ingresos, costos y ganancia usando SymPy para manipulaci√≥n simb√≥lica.
   - Se a√±adi√≥ una funci√≥n para encontrar el precio √≥ptimo que maximiza la ganancia, resolviendo derivadas y validando condiciones econ√≥micas reales (precios y cantidades no negativas).

3. **Interfaz de usuario con Streamlit**
   - Se utiliza Streamlit para crear una interfaz web interactiva.
   - Los par√°metros clave (demanda, sensibilidad al precio, costos, moneda, precio actual) se configuran desde la barra lateral.
   - Se agregaron ayudas contextuales y descripciones detalladas para cada par√°metro, facilitando su comprensi√≥n.

4. **C√°lculo y comparaci√≥n de escenarios**
   - Al pulsar el bot√≥n de c√°lculo, se determina el precio √≥ptimo y la ganancia m√°xima.
   - Se compara el escenario √≥ptimo con el precio actual ingresado, mostrando m√©tricas clave (unidades vendidas, ingresos, ganancia) en columnas separadas.

5. **Visualizaci√≥n gr√°fica**
   - Se genera un gr√°fico de la funci√≥n de ganancia respecto al precio usando Matplotlib.
   - Se destacan visualmente el precio √≥ptimo, el precio actual y los puntos de equilibrio (donde la ganancia es cero).
   - El rango del gr√°fico se ajusta din√°micamente para incluir todos los puntos relevantes.

6. **Manejo de casos especiales**
   - Si la sensibilidad al precio es cero, se informa al usuario y se explica el comportamiento especial de la funci√≥n de ganancia.
   - Se validan los datos de entrada y se muestran mensajes de error o advertencia si los par√°metros no tienen sentido econ√≥mico.

7. **Explicaciones matem√°ticas**
   - Al final de la app, se muestran las f√≥rmulas matem√°ticas utilizadas, explicadas paso a paso y adaptadas a los valores ingresados por el usuario.
   - Se usan expansores para mostrar explicaciones adicionales de manera opcional.

8. **Mensajes y experiencia de usuario**
   - Se utilizan mensajes de √©xito, advertencia e informaci√≥n para guiar al usuario en todo momento.
   - El dise√±o y los textos est√°n pensados para ser amigables y comprensibles, incluso para usuarios sin formaci√≥n matem√°tica.